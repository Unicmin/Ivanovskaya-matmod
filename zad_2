# Задание 2
#Выполнила Ивановская Елена, д-А 131
#Создайте модель множественной линейной регрессии дневных  потоков углекислого газа за летний период 2013 года по данным
# измерений методом турбулентой пульсации

#работа  пакетами
library(tidyverse)
library(readr)
library(stringr)
library(dplyr)
library(ggplot2)



#Читыем данные из файла, пропускаем первую NA пустые и сгенерированные пороговые значения на NA, игнорируем строки с "["
eddypro = read_csv("eddypro.csv", skip = 1, na=c("","NA","-9999","-9999.0"),
                   comment=c("["))



#Удаляем первую ненужную пустую строку 
eddypro = eddypro[-1, ]

#Удаление первой строки и ненужного пустого столба "roll"
eddypro = select(eddypro, -(roll))

#Изменение специальных символов в названии столбцов на допустимые для переменных названия 
names(eddypro) = names(eddypro) %>%
  str_replace_all("[!]","_exclam_") %>%
  str_replace_all("[?]", "_quest_") %>% 
  str_replace_all("[*]", "_star_") %>% 
  str_replace_all("[+]", "_plus_") %>%
  str_replace_all("[-]", "_minus_") %>%
  str_replace_all("[@]", "_at_") %>%
  str_replace_all("[$]", "_dollar_") %>%
  str_replace_all("[#]", "_hash_") %>%
  str_replace_all("[/]", "_slash_") %>%
  str_replace_all("[%]", "__pecent_") %>%
  str_replace_all("[&]", "_amp_") %>%
  str_replace_all("[\\^]", "_power_") %>%
  str_replace_all("[()]","_")

#Отфильтруем по заданию данные только за летний период. С начала июня(152) по конец августа (244)
eddypro = filter(eddypro,DOY >= 152 & DOY < 244)

#Отфильтруем данные по заданию только за дневное время 
eddypro = filter(eddypro, daytime ==TRUE)

#Преобразуем переменные типа char в факторы
eddypro = eddypro %>% mutate_if(is.character, as.factor)

# нам необходимо получить все переменные были типа numeric, 
# воспользуемся функциями saplly и is.numeric
eddypro_numeric = eddypro[,sapply(eddypro,is.numeric) ]
str(eddypro_numeric)

# посмотрим коэф корреляции 
cor_eddy = cor(eddypro_numeric)
str(cor_eddy)

# необходимо избавиться от na
# для начала надо посчитать в таблице сколько NA  в каждой переменной
# воспользуемся функцией summarise_all и sum
na_cor_eddy = eddypro_numeric %>% summarise_all(~sum(is.na(.x)))
navect = na_cor_eddy[1,]%>% as.integer()

# посмотрим у каких переменных кол-во NA превышает 30
names(eddypro_numeric)[navect>30]

# исключим все na
eddypro_numeric = na.exclude(eddypro_numeric)

# снова посчитаем коэф корреляции
cor_eddy = cor(eddypro_numeric)
cor_eddy = data.frame(cor_eddy)

#найдем коэф детерминации для нашей зависимой переменной
cor_vars=cor_eddy$co2_flux^2
names(cor_vars)=names(cor_eddy)

# выбрем только значимые коэффициенты, в которых коэф детерминации более 0,13
cor_vars=cor_vars[cor_vars>0.13]

# узнаем имена значимых переменных
names(cor_vars)%>% na.exclude()

## МНОЖЕСТВЕННАЯ РЕГРЕССИЯ

# Построим модель по известным нам значимым переменным 
mod1 = lm(data = eddypro_numeric, co2_flux ~ DOY + rand_err_Tau + LE +
          + rand_err_LE  + rand_err_co2_flux + h2o_flux + rand_err_h2o_flux + RH + u_star_ + un_Tau + un_LE
          + un_co2_flux + un_h2o_flux + h2o_var + w_slash_co2_cov + w_slash_h2o_cov + flowrate)

# помострим коэффициенты
coef(mod1)
#остатки
resid(mod1)
# доверительный интервал
confint(mod1)
# посмотрим р-значения по модели
summary(mod1)
# коэффициент детерминации = 0,9985
# проведем дисперсионный анализ
anova(mod1)

# согласно ДА мы видим какие переменные у нас не значимые: 
#  flowrate

## Построим графиик нормального распределения:
plot(mod1,2)
# в целом данные распределены нормально
# Построим график наблюдаемых значений от предсказанных значений
plot(mod1$fitted.values, eddypro_numeric$co2_flux)
# Добавим линию у = х
abline(a=0, b=1, col = "blue")
# почти все точки лежат на прямой,
# значит модель хорошо оценивает данные дневных потоков СО2

# Построим график зависимости остатков от наблюдаемых значений 
plot(eddypro_numeric$co2_flux,mod1$residuals)
# Для поиска коэффициентов для линии зададим модель, связывающую остатки и CO2
mo1 = lm(mod1$residuals ~ eddypro_numeric$co2_flux)
abline(a = mo1$coefficients[1], b = mo1$coefficients[2],col = "blue")
# наблюдается зависимость остатков от наблюдаемых значений 

#МОДЕЛЬ 2 
# построим аналогичную модель при этом будем искать зависимость между переменными 
# второго порядка 
mod2 = lm(data = eddypro_numeric, co2_flux~ (DOY + rand_err_Tau + LE + + rand_err_LE  + rand_err_co2_flux
                                             + h2o_flux + rand_err_h2o_flux + RH + u_star_ + un_Tau + un_LE
                                             + un_co2_flux + un_h2o_flux + h2o_var + w_slash_co2_cov + w_slash_h2o_cov
                                             + flowrate)^2)
# помострим коэффициенты
coef(mod2)
#Остатки
resid(mod2)
#Доверительный интервал
confint(mod2)
#P-значения по модели
summary(mod2)

# коэффициент детерминации = 0,9997

#Дисперсионный анализ
anova(mod2)

# согласно ДА мы видим какие переменные 1 и 2-го порядка у нас не значимые: 
#flowrate, DOY:w_slash_h2o_cov и т.д
# однако если в первом порядке эти переменные не значимы, то во 2-м могут быть зависимости

#Графиик на нормальной веротяностной бумаге :
plot(mod2,2) 
# Построим график наблюдаемых значений от предсказанных значений
plot(mod2$fitted.values, eddypro_numeric$co2_flux)
# Добавим линию у=х
abline(a=0, b=1, col="orange")
# Построим график остатков от набоюдаемых значений 
plot(eddypro_numeric$co2_flux,mod2$residuals)
# Для поиска коэффициентов для линии зададим модель, связывающую остатки и CO2
mo2=lm(mod2$residuals~eddypro_numeric$co2_flux)
abline(a=mo2$coefficients[1],b=mo2$coefficients[2],col="orange")

#МОДЕЛЬ 3 
# так как незначимые 1 порядка могут иметь связи с перемнными 2-го порядка, мы их не искоючаем

mod3 = lm (data = eddypro_numeric, co2_flux ~ ((DOY + rand_err_Tau + LE + + rand_err_LE  + rand_err_co2_flux
                                                + h2o_flux + rand_err_h2o_flux + RH + u_star_ + un_Tau + un_LE
                                                + un_co2_flux + un_h2o_flux + h2o_var + w_slash_co2_cov + w_slash_h2o_cov
                                                + flowrate)^2) - flowrate - DOY:w_slash_h2o_cov - rand_err_Tau:w_slash_h2o_cov -
             rand_err_Tau:flowrate - LE:h2o_flux - LE:RH - LE:un_LE - LE:un_co2_flux - LE:un_h2o_flux - LE:h2o_var - LE:w_slash_co2_cov -
             rand_err_LE:RH - rand_err_LE:un_LE - rand_err_LE:un_h2o_flux - rand_err_co2_flux:w_slash_co2_cov - h2o_flux:RH - h2o_flux:u_star_ -
             h2o_flux:un_co2_flux - h2o_flux:un_h2o_flux - h2o_flux:w_slash_h2o_cov - rand_err_h2o_flux:RH - rand_err_h2o_flux:un_Tau -
             rand_err_h2o_flux:w_slash_h2o_cov - rand_err_h2o_flux:flowrate - RH:un_Tau - RH:w_slash_h2o_cov - RH:flowrate -
             u_star_:h2o_var - u_star_:flowrate - un_Tau:h2o_var - un_Tau:flowrate - un_LE:un_h2o_flux - un_LE:h2o_var - un_LE:w_slash_co2_cov -
             un_LE:w_slash_h2o_cov - un_LE:flowrate - un_co2_flux:un_h2o_flux - un_co2_flux:w_slash_co2_cov - un_co2_flux:w_slash_h2o_cov -
             un_co2_flux:flowrate - un_h2o_flux:h2o_var - h2o_var:flowrate - w_slash_co2_cov:w_slash_h2o_cov - w_slash_co2_cov:flowrate -
             w_slash_h2o_cov:flowrate)

#Коэффициенты
coef(mod3)
#Остатки
resid(mod3)
#Доверительный интервал 
confint(mod3)
#P-значения по модели
summary(mod3)
# коеффициент детерминации = 0,9997, такой же как и  во 2 модели,
# таким образом, более полная модель 2 
#Дисперсионный анализ
anova(mod3)
#Графиик на нормальной веротяностной бумаге :
plot(mod3,2) 
# Построим график наблюдаемых значений от предсказанных значений
plot(mod3$fitted.values, eddypro_numeric$co2_flux)
# Добавим линию у=х
abline(a=0, b=1, col="green")
# Построим график остатков от набоюдаемых значений 
plot(eddypro_numeric$co2_flux,mod3$residuals)
# Для поиска коэффициентов для линии зададим модель, связывающую остатки и CO2
mo3=lm(mod3$residuals~eddypro_numeric$co2_flux)
abline(a=mo3$coefficients[1],b=mo3$coefficients[2],col="green")

#МОДЕЛЬ 4
# на основании ДА 3 модели уберем незначимые переменные

mod4 = lm (data = eddypro_numeric, co2_flux ~ ((DOY + rand_err_Tau + LE + + rand_err_LE  + rand_err_co2_flux
                                                + h2o_flux + rand_err_h2o_flux + RH + u_star_ + un_Tau + un_LE
                                                + un_co2_flux + un_h2o_flux + h2o_var + w_slash_co2_cov + w_slash_h2o_cov
                                                + flowrate)^2) - flowrate - DOY:w_slash_h2o_cov - rand_err_Tau:w_slash_h2o_cov -
             rand_err_Tau:flowrate - LE:h2o_flux - LE:RH - LE:un_LE - LE:un_co2_flux - LE:un_h2o_flux - LE:h2o_var - LE:w_slash_co2_cov -
             rand_err_LE:RH - rand_err_LE:un_LE - rand_err_LE:un_h2o_flux - rand_err_co2_flux:w_slash_co2_cov - h2o_flux:RH - h2o_flux:u_star_ -
             h2o_flux:un_co2_flux - h2o_flux:un_h2o_flux - h2o_flux:w_slash_h2o_cov - rand_err_h2o_flux:RH - rand_err_h2o_flux:un_Tau -
             rand_err_h2o_flux:w_slash_h2o_cov - rand_err_h2o_flux:flowrate - RH:un_Tau - RH:w_slash_h2o_cov - RH:flowrate -
             u_star_:h2o_var - u_star_:flowrate - un_Tau:h2o_var - un_Tau:flowrate - un_LE:un_h2o_flux - un_LE:h2o_var - un_LE:w_slash_co2_cov -
             un_LE:w_slash_h2o_cov - un_LE:flowrate - un_co2_flux:un_h2o_flux - un_co2_flux:w_slash_co2_cov - un_co2_flux:w_slash_h2o_cov -
             un_co2_flux:flowrate - un_h2o_flux:h2o_var - h2o_var:flowrate - w_slash_co2_cov:w_slash_h2o_cov - w_slash_co2_cov:flowrate -
             w_slash_h2o_cov:flowrate -LE:flowrate - rand_err_LE:rand_err_h2o_flux - rand_err_LE:h2o_var - rand_err_LE:w_slash_h2o_cov -
             rand_err_co2_flux:h2o_flux - rand_err_co2_flux:w_slash_h2o_cov - h2o_flux:rand_err_h2o_flux - h2o_flux:un_Tau - h2o_flux:flowrate -
             rand_err_h2o_flux:un_co2_flux - RH:u_star_ -RH:un_LE -RH:un_co2_flux - RH:w_slash_co2_cov)
#Коэффициенты
coef(mod4)
#Остатки
resid(mod4)
#Доверительный интервал
confint(mod4)
#P-значения по модели
summary(mod4)

# коеффициент детерминации = 0.9997 - не изменился
# таким образом,  более полная модель 2 лучше отражает данные

#Дисперсионный анализ
anova(mod4)
#Графиик на нормальной веротяностной бумаге :
plot(mod4,2) 
# Построим график наблюдаемых значений от предсказанных значений
plot(mod4$fitted.values, eddypro_numeric$co2_flux)
# Добавим линию у=х
abline(a=0, b=1, col="red")
# Построим график остатков от набоюдаемых значений 
plot(eddypro_numeric$co2_flux,mod4$residuals)
# Для поиска коэффициентов для линии зададим модель, связывающую остатки и CO2
mo4=lm(mod4$residuals~eddypro_numeric$co2_flux)
abline(a=mo4$coefficients[1],b=mo4$coefficients[2],col="red")

# Оставливайемся на 4 модели, так как R^2 не изменяется
# В итоге наилучшим образом  отражает данные 2 модель
# R^2=0.9997
# Данные на графике нормального распределенения близки 
# к нормальному распределению 
